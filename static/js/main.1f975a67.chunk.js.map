{"version":3,"sources":["materials.js","compositions/OrbitControls.js","compositions/Background.js","scenes/StarMap.js","index.js","App.js"],"names":["wireframe","MeshBasicMaterial","color","opacity","MeshNormalMaterial","flatShading","MeshPhongMaterial","shininess","specular","MeshStandardMaterial","metalness","roughness","OrbitControlsComponent","_ref","_ref$damping","damping","_ref$minAzimuthAngle","minAzimuthAngle","Infinity","_ref$maxAzimuthAngle","maxAzimuthAngle","_ref$autoRotateSpeed","autoRotateSpeed","_ref$enablePan","enablePan","_ref$enableRotate","enableRotate","_ref$enableZoom","enableZoom","_useThree","useThree","canvas","camera","controls","useMemo","console","log","ThreeOrbitControls","autoRotate","useEffect","dispose","useRender","update","_ref$color","scene","gl","setPixelRatio","window","devicePixelRatio","background","Color","Star","constellation","onClick","position","THREE","X","cosmicMultiplier","Y","Z","getVector3ForConstellation","react_default","a","createElement","event","material","materials","attach","args","Tree","innerWidth","innerHeight","set","lookAt","dist","Background_OrbitControlsComponent","constellations","map","index","key","SOLARSYSTEMNAME","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1f975a67.chunk.js","sourcesContent":["import {\r\n\tMeshBasicMaterial,\r\n\tMeshStandardMaterial,\r\n\tMeshNormalMaterial,\r\n\tSphericalReflectionMapping,\r\n\tMeshPhongMaterial,\r\n\tMeshToonMaterial,\r\n\tDoubleSide\r\n} from 'three';\r\n\r\nconst globalFlatShading = false,\r\n\tglobalWireframe = false;\r\n\r\nexport const wireframe = new MeshBasicMaterial({\r\n\twireframe: true,\r\n\tcolor: 0,\r\n\topacity: 0.5\r\n});\r\n\r\nexport const normal = new MeshNormalMaterial({\r\n\tflatShading: globalFlatShading,\r\n\twireframe: globalWireframe\r\n});\r\n\r\nexport const whiteMaterial = new MeshPhongMaterial({\r\n\tcolor: 0xeeeeee,\r\n\tflatShading: globalFlatShading,\r\n\tshininess: 230,\r\n\t// side: DoubleSide,\r\n\twireframe: globalWireframe\r\n});\r\n\r\nexport const softMaterial = new MeshPhongMaterial({\r\n\tcolor: 0xaaaaaa,\r\n\tflatShading: globalFlatShading,\r\n\tshininess: 0,\r\n\t// side: DoubleSide,\r\n\twireframe: globalWireframe\r\n});\r\n\r\nexport const demoMaterial = new MeshPhongMaterial({\r\n\tcolor: 'rgb(20, 20, 80)',\r\n\tflatShading: globalFlatShading,\r\n\tshininess: 130,\r\n\tspecular: 'yellow',\r\n\twireframe: globalWireframe,\r\n});\r\n\r\nexport const redMaterial = new MeshStandardMaterial({\r\n\tcolor: 0xff0000,\r\n\tflatShading: globalFlatShading,\r\n\tmetalness: 0.5,\r\n\troughness: 0.2,\r\n\twireframe: globalWireframe\r\n});\r\n\r\nexport const basicWhite = new MeshBasicMaterial({\r\n\tcolor: 0xffffff,\r\n\twireframe: true\r\n})\r\nexport const basicBlack = new MeshBasicMaterial({\r\n\tcolor: 0x000000\r\n})\r\nexport const basicGray = new MeshBasicMaterial({\r\n\tcolor: 0x000000,\r\n\topacity: 0.25\r\n})","import { useEffect, useMemo } from 'react';\r\nimport ThreeOrbitControls from 'three-orbitcontrols';\r\nimport {\r\n\tuseThree,\r\n\tuseRender\r\n} from 'react-three-fiber';\r\n\r\n\r\nexport default function OrbitControlsComponent ({\r\n\tdamping = 0.2,\r\n\tminAzimuthAngle = -Infinity,\r\n\tmaxAzimuthAngle = Infinity,\r\n\tautoRotateSpeed = false,\r\n\tenablePan = true,\r\n\tenableRotate = true,\r\n\tenableZoom = true\r\n}) {\r\n\tconst {\r\n\t\tcanvas,\r\n\t\tcamera\r\n\t} = useThree();\r\n\r\n\tconst controls = useMemo(() => {\r\n\t\tconsole.log('-- new ThreeOrbitControls');\r\n\t\tconst controls = new ThreeOrbitControls(camera, canvas);\r\n\t\tcontrols.damping = damping;\r\n\t\tcontrols.minAzimuthAngle = minAzimuthAngle;\r\n\t\tcontrols.maxAzimuthAngle = maxAzimuthAngle;\r\n\t\tcontrols.enablePan = enablePan;\r\n\t\tcontrols.enableRotate = enableRotate;\r\n\t\tcontrols.enableZoom = enableZoom;\r\n\r\n\t\tcontrols.autoRotate = !!autoRotateSpeed;\r\n\t\tcontrols.autoRotateSpeed = autoRotateSpeed;\r\n\t\treturn controls;\r\n\t}, [camera, canvas,\r\n\t\tdamping,\r\n\t\tminAzimuthAngle,\r\n\t\tmaxAzimuthAngle,\r\n\t\tautoRotateSpeed,\r\n\t\tenablePan,\r\n\t\tenableRotate,\r\n\t\tenableZoom]);\r\n\r\n\tuseEffect(() => {\r\n\t\t// scene.background = new Color(0x000000);\r\n\t\treturn () => {\r\n\t\t\tconsole.log('-- dispose ThreeOrbitControls');\r\n\t\t\tcontrols.dispose();\r\n\t\t}\r\n\t}, []);\r\n\r\n\tuseRender(() => {\r\n\t\tif (!controls) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!!autoRotateSpeed) {\r\n\t\t\tcontrols.update();\r\n\t\t}\r\n\t});\r\n\r\n\treturn null;\r\n}\r\n","import { useEffect } from 'react';\r\nimport {\r\n\tColor\r\n} from 'three';\r\nimport {\r\n\tuseThree,\r\n\tuseRender\r\n} from 'react-three-fiber';\r\n\r\n\r\nexport default function OrbitControlsComponent ({\r\n\tcolor = 0x000000\r\n}) {\r\n\tconst {\r\n\t\tscene,\r\n\t\tgl\r\n\t} = useThree();\r\n\r\n\tuseEffect(() => {\r\n\t\tgl.setPixelRatio(window.devicePixelRatio ? window.devicePixelRatio : 1);\r\n\t\tscene.background = new Color(color);\r\n\t}, [color]);\r\n\r\n\treturn null;\r\n}\r\n","import React from 'react';\r\nimport * as THREE from 'three';\r\nimport * as materials from '../materials';\r\nimport {\r\n\tCanvas\r\n} from 'react-three-fiber';\r\n\r\nimport OrbitControls from '../compositions/OrbitControls';\r\nimport Background from '../compositions/Background';\r\n\r\nimport constellations from '../constellations.json';\r\n\r\nfunction Star ({\r\n\tconstellation,\r\n\tonClick\r\n}) {\r\n\tif (!constellation) {\r\n\t\tconsole.log('Undefined constellation fuck off');\r\n\t\treturn null;\r\n\t}\r\n\tconst position = getVector3ForConstellation(constellation);\r\n\r\n\treturn <group>\r\n\t\t<mesh\r\n\t\t\tonClick={onClick ? (event) => onClick(event, constellation) : null}\r\n\t\t\tposition={position}\r\n\t\t\tmaterial={materials.wireframe}\r\n\t\t>\r\n\t\t\t<tetrahedronBufferGeometry attach=\"geometry\" args={[1]} />\r\n\t\t</mesh>\r\n\t</group>\r\n}\r\n\r\nconst cosmicMultiplier = 1e-15;\r\nfunction getVector3ForConstellation (constellation) {\r\n\treturn new THREE.Vector3(constellation.X * cosmicMultiplier, constellation.Y * cosmicMultiplier, constellation.Z * cosmicMultiplier)\r\n}\r\n\r\nexport default function Tree () {\r\n\tconst camera = new THREE.PerspectiveCamera(\r\n\t\t70,\r\n\t\twindow.innerWidth / window.innerHeight,\r\n\t\t1,\r\n\t\t1000);\r\n\tcamera.position.set(100, 300, 0);\r\n\tcamera.lookAt(new THREE.Vector3(0, 0, 0));\r\n\r\n\treturn <Canvas camera={ camera }>\r\n\t\t<OrbitControls\r\n\t\t\tenablePan={true}\r\n\t\t\tenableRotate={true}\r\n\t\t\tenableZoom={true}\r\n\t\t\tautoRotateSpeed={ 0 }\r\n\t\t/>\r\n\t\t<Background color={0xFCFCFC} />\r\n\r\n\t\t{ constellations\r\n\t\t\t// .slice(0, 1000)\r\n\t\t\t.map((constellation, index) => <Star\r\n\t\t\t\tkey={index}\r\n\t\t\t\tconstellation={constellation}\r\n\t\t\t\tonClick={(event, constellation) => {\r\n\t\t\t\t\tconsole.log('Clicked ' + constellation.SOLARSYSTEMNAME, constellation);\r\n\r\n\t\t\t\t\t// Need to get the \"controls\" const that is currently private to <OrbitControls />\r\n\t\t\t\t\t// controls.target.set(getVector3ForConstellation(constellation))\r\n\t\t\t\t}}\r\n\t\t\t/>)}\r\n\t</Canvas>;\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// import registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// registerServiceWorker();\n","import React from 'react';\nimport StarMap from './scenes/StarMap';\n\nexport default function App () {\n\treturn <StarMap />\n}\n"],"sourceRoot":""}